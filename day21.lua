rule = {{"../..",".../#.#/..."},
{"#./..","..#/..#/#.."},
{"##/..",".../#../..#"},
{".#/#.","#../.../..."},
{"##/#.","#.#/.#./#.."},
{"##/##","..#/#.#/..#"},
{".../.../...",".#../#..#/#.../.#.."},
{"#../.../...","..##/..##/.#.#/...."},
{".#./.../...","..##/..##/.###/##.."},
{"##./.../...","..../.##./#.##/..#."},
{"#.#/.../...","####/#.##/#.##/#.#."},
{"###/.../...","#..#/..#./..../##.#"},
{".#./#../...","..#./.#../...#/#.##"},
{"##./#../...","..../#.##/#..#/.#.."},
{"..#/#../...","##.#/####/###./###."},
{"#.#/#../...","..../#.##/.###/#.#."},
{".##/#../...","..#./##.#/####/..##"},
{"###/#../...","..#./.##./...#/..#."},
{".../.#./...",".###/#.../.#../####"},
{"#../.#./...","###./.#.#/#.##/##.#"},
{".#./.#./...","..##/..#./###./..#."},
{"##./.#./...","#..#/..#./###./...#"},
{"#.#/.#./...","#.../##.#/#.##/#..#"},
{"###/.#./...","...#/#..#/####/##.#"},
{".#./##./...","#.##/#.##/..../#.#."},
{"##./##./...","..##/###./..#./####"},
{"..#/##./...","..../##../##.#/.##."},
{"#.#/##./...","##../####/####/.#.#"},
{".##/##./...","..../##.#/.###/##.."},
{"###/##./...",".#../#.#./.#../..##"},
{".../#.#/...","####/#.#./..##/#..#"},
{"#../#.#/...",".#../.#../#..#/...."},
{".#./#.#/...","..##/.##./####/#.#."},
{"##./#.#/...","..#./###./.#../...."},
{"#.#/#.#/...","..#./..#./...#/#..."},
{"###/#.#/...","###./.#../##../####"},
{".../###/...","#.##/####/####/..##"},
{"#../###/...",".#.#/...#/###./...#"},
{".#./###/...","..../.#.#/.#../...."},
{"##./###/...","...#/.###/..../.##."},
{"#.#/###/...","..##/###./.#../#..#"},
{"###/###/...",".###/..#./..#./.###"},
{"..#/.../#..",".##./###./####/#.#."},
{"#.#/.../#..","####/#.../#.../..##"},
{".##/.../#..","###./#..#/..#./.#.."},
{"###/.../#..",".###/.##./#.#./.###"},
{".##/#../#..","##.#/...#/.#.#/...#"},
{"###/#../#..","#.##/..#./..../#..#"},
{"..#/.#./#..","#..#/##.#/.##./####"},
{"#.#/.#./#..","###./..##/#..#/#..#"},
{".##/.#./#..",".#../..../...#/...#"},
{"###/.#./#..",".#../##../.###/..#."},
{".##/##./#..","##../..##/##../##.#"},
{"###/##./#..","#.##/#..#/.###/####"},
{"#../..#/#..","##.#/####/#.../..##"},
{".#./..#/#..","#..#/..../..../###."},
{"##./..#/#..","#..#/##.#/##.#/#.#."},
{"#.#/..#/#..",".###/##.#/####/#..."},
{".##/..#/#..","####/.##./...#/#..#"},
{"###/..#/#..",".#.#/####/##.#/...#"},
{"#../#.#/#..","..##/.##./..##/##.."},
{".#./#.#/#..","#.../##../..##/..#."},
{"##./#.#/#..","...#/##.#/#..#/.#.."},
{"..#/#.#/#..","#.#./##../#.##/###."},
{"#.#/#.#/#..","##../##.#/#.#./...."},
{".##/#.#/#..","####/...#/####/.#.."},
{"###/#.#/#..","..../.#../.#../...."},
{"#../.##/#..",".#.#/..#./#..#/.###"},
{".#./.##/#..","#.../.#.#/.###/.##."},
{"##./.##/#..","#.#./#.#./.#../###."},
{"#.#/.##/#..","####/##../.##./####"},
{".##/.##/#..","#.../#.#./#.##/###."},
{"###/.##/#..","####/####/..../####"},
{"#../###/#..","####/.##./...#/##.#"},
{".#./###/#..",".#../#.##/#..#/..##"},
{"##./###/#..","#.#./..##/#.../..##"},
{"..#/###/#..","#.##/.###/#.#./###."},
{"#.#/###/#..","#.##/#.##/..../#..#"},
{".##/###/#..",".##./#.#./..##/####"},
{"###/###/#..",".##./#..#/#.../###."},
{".#./#.#/.#.","#.#./#..#/#..#/##.#"},
{"##./#.#/.#.","...#/#.#./##.#/###."},
{"#.#/#.#/.#.","##.#/..##/##.#/#.##"},
{"###/#.#/.#.",".#.#/..#./##../.##."},
{".#./###/.#.","#..#/..#./..##/#..."},
{"##./###/.#.","####/.#.#/####/..#."},
{"#.#/###/.#.","#.#./..##/##../#..#"},
{"###/###/.#.","...#/..../..../#.#."},
{"#.#/..#/##.","..#./.##./###./.#.#"},
{"###/..#/##.","#.../###./...#/####"},
{".##/#.#/##.","..../..../.###/##.."},
{"###/#.#/##.","##../..../#.#./.##."},
{"#.#/.##/##.",".#.#/##../..##/#.#."},
{"###/.##/##.","###./####/...#/.#.."},
{".##/###/##.","..##/#.../..##/.#.#"},
{"###/###/##.","..##/...#/.###/.#.."},
{"#.#/.../#.#","..##/#.../##.#/...."},
{"###/.../#.#","#.##/#..#/..../##.."},
{"###/#../#.#","#.../..../##.#/..#."},
{"#.#/.#./#.#","###./..##/.#../.##."},
{"###/.#./#.#","..../#..#/.###/#..#"},
{"###/##./#.#",".#.#/###./##.#/.###"},
{"#.#/#.#/#.#","..../..../.##./#..#"},
{"###/#.#/#.#",".###/.#.#/...#/.###"},
{"#.#/###/#.#",".#.#/##../.#../.#.."},
{"###/###/#.#",".#.#/.##./#.##/...."},
{"###/#.#/###","..#./..#./..#./..##"},
{"###/###/###","##.#/..##/.#.#/...."}}
input = {".#.",
"..#",
"###"}
art = {}
for i = 1, 3 do
    if not art[i] then art[i] = {} end
    for j = 1, 3 do
        local str = string.sub(input[j],i,i)
        if str == "#" then
            art[i][j] = 1
        else
            art[i][j] = 0
        end
    end
end
function debugprint(art) -- print a art (debug)
    local poi = ""
    for i = 1, #art do
        poi = poi .. "-"
    end
    print(poi)
    for y = 1, #art do
        local str = ""
        for x = 1, #art do
            if not art[x] then art[x] = {} end
            if art[x][y] == 1 then
                str = str .. "#"
            elseif art[x][y] == 0 then
                str = str .. "."
            else
                str = str .. "o"
            end
        end
        print(str)
    end
end
function copy(art) -- copy a art (so a change made on it don't affect the original)
    local nart = {}
    for x = 1, #art do
        if not nart[x] then nart[x] = {} end
        for y = 1, #art do
            nart[x][y] = art[x][y]
        end
    end
    return nart
end
--[[credits to
    https://www.geeksforgeeks.org/inplace-rotate-square-matrix-by-90-degrees/
    https://www.geeksforgeeks.org/rotate-matrix-90-degree-without-using-extra-space-set-2/
--]]
function rotate(art) -- rotate a art anti - clockwize
    --transpose
    for x = 1, #art do
        for y = x, #art do
            art[x][y], art[y][x] = art[y][x], art[x][y]
        end
    end
    --invert column
    for x = 1, #art do
        for y = 1,#art/2 do
            art[x][y], art[x][#art + 1 - y] = art[x][#art + 1 - y], art[x][y]
        end
    end
end
function flip(art) -- flip a art
    for x = 1, #art do
        for y = 1, #art do
            art[x][y], art[#art + 1 - x] = art[#art + 1 - x][y]
        end
    end
end
function artbreak(art,n) -- break a art in multiple small arts
    local max = #art/n
    local t = {}
    for i = 1, max do
        for j = 1, max do
            local nart = {}
            for x = n*(i - 1) + 1, n*i do
                local xr = (x - 1)%n + 1
                if not nart[xr] then nart[xr] = {} end
                for y = n*(j - 1) + 1, n*j do
                    local yr = (y - 1)%n + 1
                    nart[xr][yr] = art[x][y]
                end
            end
            table.insert(t,nart)
        end
    end
    return t
end
function artjoin(list) -- join multiples art in one
    local max = math.sqrt(#list) -- simetry, also n^2 = #list
    local nart = {}
    return nart
end
for i = 1, 1 do
    print("process " .. i)
end
